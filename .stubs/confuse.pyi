from typing import (
    TypeVar,
    Type,
    overload,
    AnyStr,
    Union,
    Sequence,
    Iterator,
    Any,
    Dict,
    Optional,
)
from os import PathLike

T = TypeVar("T")
Path = Union[AnyStr, PathLike[AnyStr]]

class ConfigView:
    def __getitem__(self, item: str) -> "ConfigView": ...
    def __contains__(self, item: str) -> bool: ...
    @overload
    def get(self) -> str: ...
    @overload
    def get(self, template: Type[T]) -> T: ...
    def as_number(self) -> Union[float, int]: ...
    def as_str_seq(self) -> Sequence[str]: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __setitem__(self, item: str, value: Union[str, int, bool]) -> None: ...

class Configuration:
    def __init__(
        self, appname: str, modname: Optional[str] = None, read: bool = True
    ): ...
    def set_file(self, filename: Path) -> None: ...
    def clear(self) -> None: ...
    def __getitem__(self, item: str) -> ConfigView: ...
    def __setitem__(self, item: str, value: Union[str, int, bool]) -> None: ...
    def set_args(self, _: Dict[str, Any]) -> None: ...
