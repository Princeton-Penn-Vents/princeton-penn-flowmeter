from typing import List, Tuple, Callable

class Handle: ...
class Mode: ...
class PUD: ...

INPUT: Mode
FALLING_EDGE: Mode

PUD_UP: PUD
PUD_DOWN: PUD
PUD_OFF: PUD

class pi:
    connected: bool
    def __init__(
        self, host: str = None, port: int = None, show_errors: bool = False
    ): ...
    def i2c_open(self, i2c_bus: int, i2c_address: int, i2c_flags=0) -> Handle: ...
    def i2c_write_device(self, handle: Handle, data: List[int]) -> None: ...
    def i2c_read_device(self, handle: Handle, nbytes: int) -> Tuple[int, bytearray]: ...
    def i2c_close(self, handle: Handle) -> None: ...
    def stop(self) -> None: ...
    def set_PWM_dutycycle(self, user_gpio: int, dutycycle: int) -> None: ...
    def set_mode(self, pin: int, mode: Mode) -> None: ...
    def write(self, pin: int, value: int) -> None: ...
    def callback(
        self, gpio_user: int, edge: Mode, func: Callable[[int, int, int], None]
    ) -> None: ...
    def set_pull_up_down(self, gpio: int, pud: PUD) -> None: ...
    def set_glitch_filter(self, user_gpio: int, steady: int) -> None: ...
