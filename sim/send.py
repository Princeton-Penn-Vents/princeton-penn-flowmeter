#!/usr/bin/env python3

import sys
import numpy as np
import time
import http.server
import argparse
import xml.etree.ElementTree as et

from sim import (
    get_breath_starts,
    nominal_flow,
    nominal_volume,
    nominal_pressure,
    constant_compliance,
)


def make():
    sim_time = 120.0
    sample_rate = 100.0
    breathing_rate = 12.0
    max_flow = 12.0  # L/m
    tidal_volume = 0.6  # L
    peep = 4  # cm H20

    breaths = get_breath_starts(max_time=sim_time, breathing_rate=breathing_rate)

    flow = nominal_flow(
        sim_time=sim_time,
        sampling_rate=sample_rate,
        max_flow=max_flow,
        tidal_volume=tidal_volume,
        breath_starts=breaths,
        recovery_tau=15.0,
    )

    volume = nominal_volume(flow=flow, v0=0.0, sample_rate=sample_rate)

    pressure = nominal_pressure(
        volume=volume, peep=peep, compliance_func=constant_compliance
    )

    time = np.arange(0, sim_time, 1.0 / sample_rate)

    return time, flow, volume, pressure


def main(timer):
    time_arr, flow_arr, volume_arr, pressure_arr = make()

    top = et.Element("ventsensor")
    top.append(et.Comment("Generated by sim.send"))

    parameters = et.SubElement(top, "parameters")
    et.SubElement(parameters, "time").text = f"{timer}"
    data = et.SubElement(top, "data")
    alarms = et.SubElement(top, "alarms")

    time = et.SubElement(data, "time")
    flow = et.SubElement(data, "flow")
    pressure = et.SubElement(data, "pressure")
    volume = et.SubElement(data, "volume")

    props = dict(
        separator=",",
        floatmode="maxprec",
        precision=3,
        threshold=np.infty,
        max_line_width=np.infty,
    )
    time.text = np.array2string(time_arr, **props)[1:-1]
    flow.text = np.array2string(flow_arr, **props)[1:-1]
    pressure.text = np.array2string(pressure_arr, **props)[1:-1]
    volume.text = np.array2string(volume_arr, **props)[1:-1]

    return et.tostring(top)


# Ugly, better if the handler had options
start_time = time.time()


class Handler(http.server.BaseHTTPRequestHandler):
    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "application/xml")
        self.end_headers()

    def do_GET(self):
        global start_time
        self.do_HEAD()
        self.wfile.write(main(time.time() - start_time))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Serve values on network as xml")
    parser.add_argument("--port", type=int, default=8123, help="A port to serve on")
    args = parser.parse_args()

    print(f"Serving on http://127.0.0.1:{args.port}")
    server_address = ("localhost", args.port)
    httpd = http.server.ThreadingHTTPServer(server_address, Handler)
    httpd.serve_forever()
